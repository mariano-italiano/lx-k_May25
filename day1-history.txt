sudo apt-get update
sudo apt-get install vim curl -y
lsmod | grep -e overlay -e br_netfilter
sudo modprobe overlay 
sudo modprobe br_netfilter
lsmod | grep -e overlay -e br_netfilter
sudo vi /etc/modules-load.d/kubernetes.conf
sysctl -a | grep ip_forward
sysctl -a | grep bridge-nf-call
vi /etc/sysctl.d/99-kubernetes.conf
sudo vi /etc/sysctl.d/99-kubernetes.conf
sudo sysctl --system
sysctl -a | grep bridge-nf-call
sysctl -a | grep ip_forward
sudo apt-get install containerd -y
systemctl statsu containerd
sudo systemctl status containerd
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo vi /etc/containerd/config.toml
sudo systemctl restart containerd
swapon -s
sudo swapoff -a
swapon -s
sudo vi /etc/fstab 
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo apt-get update
sudo apt-cache madison kubeadm
sudo apt-get install kubeadm=1.32.2-1.1 kubelet=1.32.2-1.1 kubectl=1.32.2-1.1 -y
sudo kill -9 5551 ; sudo apt-get install kubeadm=1.32.2-1.1 kubelet=1.32.2-1.1 kubectl=1.32.2-1.1 -y
sudo apt-mark hold kubelet kubectl kubeadm
sudo kubeadm init --help
ip a
sudo kubeadm init --pod-network-cidr 192.168.0.0/16 
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
ls -la $HOME/.kube/config
kubectl get nodes
kubectl get pods -A
kubectl get nodes
vi test-calico.yaml
cat test-calico.yaml | grep "192.168."
rm test-calico.yaml 
kubectl get nodes
kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
kubectl get nodes
kubectl get pods -A
watch -n1 kubectl get pods -A
kubectl delete -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
watch -n1 kubectl get pods -A
wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
vi kube-flannel.yml 
kubectl apply -f kube-flannel.yml
watch -n1 kubectl get pods -A
kubectl get nodes
kubectl delete -f kube-flannel.yml
sudo ls -la /etc/cni/net.d/
sudo rm /etc/cni/net.d/10-flannel.conflist
sudo ls -la /etc/cni/net.d/
CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
CLI_ARCH=amd64
if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
cilium install
watch -n1 kubectl get pods -A
sudo kubeadm token create --print-join-command
ssh 192.168.1.110
apt-get install -y apt-transport-https
sudo apt-get install -y apt-transport-https
ssh 192.168.1.110
kubectl get nodes
kubectl get pods -A
kubectl get events -n kube-system
kubectl get pods -A
kubectl rollout restart deploy coredns
kubectl rollout restart deploy coredns -n kube-system
watch -n1 kubectl get pods -A
watch -n1 kubectl get pods -A -o wide
sudo cat /etc/apt/sources.list.d/kubernetes.list 
kubectl get ndoes
kubectl get nodes
kubectl drain node worker1 --ignore-daemonsets
kubectl drain worker1 --ignore-daemonsets
kubectl delete node worker1
kubectl drain node k8s-worker01 --ignore-daemonsets
kubectl get nodes
kubectl drain k8s-worker01 --ignore-daemonsets
kubectl delete k8s-worker01
kubectl delete node k8s-worker01
kubectl get nodes
kubectl get pods -A
kubectl rollout restart deploy coredns -n kube-system
kubectl get pods -A
watch -n1 kubectl get pods -A
sysctl -a | grep nf-cll
sudo sysctl -a | grep nf-cll
sudo sysctl -a | grep nf-call
sudo cd /proc/net/
sudo -i
kubectl get nodes
kubectl get pods -A
sudo apt-get install bash-completion
echo 'source <(kubectl completion bash)' >>~/.bashrc
source ~/.bashrc
kubectl get namespaces
kubectl cluster-info 
kubectl get pods
kubectl get pods -n kube-system 
kubectl get pods -n default
kubectl get ns
kubectl describe ns default 
kubectl describe pod etcd-k8s-master -n kube-system 
kubectl create ns test-ns
kubectl edit ns test-ns 
kubectl describe ns test-ns 
kubectl get pods --all-namespaces 
kubectl get pods -A 
kubectl run test-pod1 --image nginx
kubectl get pods --all-namespaces 
kubectl get pods
git clone https://github.com/mariano-italiano/lx-k_May25.git
sudo apt-get install git -y
git clone https://github.com/mariano-italiano/lx-k_May25.git
cd lx-k_May25/
mkdir day1
cd day1
ls -la
vi first-pod.yaml
kubectl run pod1 --image nginx --labels test=test1 
kubectl get pods
kubectl create -f first-pod.yaml 
kubectl get pods
kubectl delet pod -f first-pod.yaml 
kubectl delete -f first-pod.yaml 
kubectl create -f first-pod.yaml 
kubectl get pods 
vi first-pod.yaml 
kubectl describe po first-pod 
kubectl apply -f first-pod.yaml 
kubectl describe po first-pod 
vi first-pod.yaml 
kubectl apply -f first-pod.yaml 
kubectl describe po first-pod 
kubectl delete pod first-pod 
kubectl apply -f first-pod.yaml 
kubectl describe po first-pod 
kubectl get pods
kubectl events
kubectl logs first-pod 
kubectl get pods --show-labels 
kubectl get pods --show-labels -o wide
kubectl run pod2 --image httpd --labels test=test2
kubectl get pods --show-labels -o wide
kubectl get pods --show-labels -o wide --selector test
kubectl get pods --show-labels -o wide --selector test=test1
kubectl get pods pod1 -o json
kubectl get pods pod1 -o yaml 
kubectl get pods --show-labels -o wide --sort-by .metadata.name 
kubectl get pods --show-labels -o wide --sort-by .staus.podIP
kubectl get pods --show-labels -o wide --sort-by .status.podIP
kubectl get pods --show-labels -o wide --sort-by .spec.nodeName
kubectl get pods --show-labels -o wide --sort-by .spec.nodeName -A
kubectl get pods -o wide --sort-by .spec.nodeName -A
kubectl get pod -n kube-system --show-labels 
kubectl get pod -n kube-system --show-labels -l tier 
kubectl get pod -n kube-system --show-labels -l 'component in(etcd),component in (kube-apiserver)' 
kubectl get pod -n kube-system --show-labels -l 'component in(etcd),tier in(control-plane)' 
kubectl get pod -n kube-system --show-labels -l 'tier in(control-plane)' 
kubectl get pod -n kube-system --show-labels -l 'tier notin(etcd)' 
kubectl api-resources 
kubectl run second-pod --image ubuntu --labels os=ubuntu -o yaml --dry-run=client 
kubectl run second-pod --image ubuntu --labels os=ubuntu -o yaml --dry-run=client > second-pod.yaml
vi second-pod.yaml
kubectl apply -f second-pod.yaml
kubectl run second-pod --image ubuntu --labels os=ubuntu -o yaml --dry-run=server 
kubectl run second-pod --image ubuntu --labels os=ubuntu -o yaml --dry-run=client 
kubectl get pods
vi second-pod.yaml 
kubectl replace --force -f second-pod.yaml 
kubectl get pods
vi second-pod.yaml 
kubectl replace --force -f second-pod.yaml 
kubectl get pods
kubectl exec --help
kubectl exec -it second-pod -- uptime
kubectl exec -it second-pod -- hostname
kubectl exec -it second-pod -- bash
cd ..
history
history | awk '$1 > 4' | cut -c 8- > day1-history.txt
